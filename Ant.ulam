/**
   Marks the starting position

   \symbol AS
   \color #888
 */
element AntTrailStart {
  C2D.Dir mDir = 2u; // east

  @Override Void renderGraphics() {
    Drawable drawable;
    if (!drawable.canDraw())
      return;

    C2D start;
    C2D end = start.neighbor(mDir) * Drawable.cUNITS_PER_SITE;

    ColorUtils cu;
    ARGB oncol = cu.color(0x00888888);
    ARGB offcol = oncol;

    drawable.drawMaskedLine(start, end, oncol, offcol, 0xffffffff);
  }
}

/**
   \symbol AF
   \color #f92
 */
element AntFood {}


local typedef EventWindow.SiteNum SiteNum;
local typedef DataUtils.Datum Datum;
local typedef QBondableT(2u) QBondable2;

/**
   \color #ccc
 */
element Ant : QBondable2 {
  typedef C2D.Dir Dir;

  typedef TreeData.Symbol Symbol;
  typedef TreeData.Arity Arity;
  typedef TreeData.Type Type;
  typedef TreeData.Byte Byte;

  constant QBond.Index cTREE = 0u;
  constant QBond.Index cSTATE = 1u; // not implemented

  constant Symbol cCONDITIONAL_IF_FOOD_AHEAD = 0x1;
  constant Symbol cFUNCTION_FORWARD          = 0x2;
  constant Symbol cFUNCTION_LEFT             = 0x3;
  constant Symbol cFUNCTION_RIGHT            = 0x4;
  constant Symbol cFUNCTION_PROGN            = 0x5;

  Bool mInit = false;
  Bool mIsOnTrail = false;
  Bool mIsMoving = false;
  Dir mDir = 2u; // east
  Unsigned(8) mEaten = 0u;

  // Search spiral
  Unsigned(5) mCount = 0u;
  Unsigned(5) mSideLength = 1u;
  Bool mSideFirst = true;

  @Override Void behave() {
    EventWindow ew;
    QBond& treeBond = getBond(cTREE);

    if (!treeBond.isBonded())
      return; // no program

    if (!mInit) {
      // Rewind for first run
      SiteNum treeSite = treeBond.getSiteNumber();
      Tree& tree = (Tree&) ew[treeSite];
      if (!tree.isRoot()) {
        BondUtils bu;
        bu.traverse(cTREE, Tree.cPARENT, Tree.cCOMMON);
        return;
      }
      mInit = true;
    }

    if (mIsMoving) {
      swapForward();

    } else if (!mIsOnTrail) {
      search();

    } else {
      exec();
    }
  }

  // NOTE: "on trail" flag is set in `swapForward`
  // Hardcoded for now to keep things simple (this function requires state)
  //
  // Right spiral:
  // - move x sites forward
  // - turn right
  // - move x sites forward
  // - increase x
  // - repeat
  Void search() {
    if (mCount >= mSideLength)
      return; // couldn't find the start, just sit here

    // Set flag to move
    forward();

    // Update counters
    mCount++;
    if (mCount == mSideLength) {
      if (!mSideFirst) {
        // Increase side length or give up
        if (mSideLength == Unsigned(5).maxof)
          return; // get stuck
        mSideLength++;
      }
      // Next side
      right();
      mCount = 0u;
      mSideFirst = !mSideFirst;
    }
  }

  Void exec() {
    BondUtils bu;
    EventWindow ew;
    TreeData td;

    // Get the tree
    QBond& treeBond = getBond(cTREE);
    if (!treeBond.isBonded())
      return; // no tree too execute
    Tree& tree = (Tree&) ew[treeBond.getSiteNumber()];
    Datum result = tree.getResult();
    Datum data = tree.getData();

    if (td.hasValue(result) && td.isFinal(result)) {
      // The subtree is already evaluated
      if (!tree.isRoot()) {
        // Move up
        if (bu.traverse(cTREE, Tree.cPARENT, Tree.cCOMMON) == BondUtils.cSTATUS_OK) {
          // Pass the result to parent (should be accessible)
          Tree& parent = (Tree&) ew[treeBond.getSiteNumber()];
          evalOrStoreArgument(parent, td.getValue(result));

          // Unset value while we have the child in scope
          result = td.setIsFinal(result, false);
          result = td.unsValue(result);
          tree.setResult(result);
        }
      } else {
        // Root node is successfully evaluated!
        // (We could wait here for someone to consume the result, but there's
        // no need in this case.)
        result = td.setIsFinal(result, false);
        result = td.unsValue(result);
        tree.setResult(result);
      }

    } else if (td.hasValue(result) && td.getType(data) == TreeData.cTYPE_CONDITIONAL) {
      // Non-final result value for conditionals is selected branch number.
      // (Conditionals don't need to store first argument, since they can have
      // only one at most with one branch.)
      Arity branch = (Arity) td.getValue(result);
      if (branch == Arity.maxof) {
        // done
        result = td.setIsFinal(result, true);
        result = td.setValue(result, TreeData.cNIL);
      } else {
        // Move to selected branch
        QBond.Index index = (branch == 0u) ? Tree.cLEFT : Tree.cRIGHT;
        bu.traverse(cTREE, index, Tree.cCOMMON);
      }

    } else {
      // Eval if there's enough arguments, or move to children
      Arity argNumRequired = getArgNum(tree);
      if (argNumRequired == 1u && td.hasValue(result)) {
        // NOTE: unused branch, no functions with single argument
        eval(tree, td.getValue(result));

      } else if (argNumRequired == 0u) {
        eval(tree);

      } else {
        QBond.Index index = td.hasValue(result) ? Tree.cRIGHT : Tree.cLEFT;
        bu.traverse(cTREE, index, Tree.cCOMMON);
      }
    }
  }

  // NOTE:
  // * assuming eval always succeeds, no need to store the 2nd argument to retry
  // * also assume that arguments are always passed in correct order,
  //   no parallel execution for now
  Void evalOrStoreArgument(Tree& tree, Byte arg) {
    TreeData td;

    Arity argNumRequired = getArgNum(tree);
    Datum result = tree.getResult();
    Bool hasArg = td.hasValue(result);

    if (argNumRequired > 1 && !hasArg) {
      // Store as 1st argument
      result = td.setIsFinal(result, false);
      result = td.setValue(result, arg);
      tree.setResult(result);

    } else if (argNumRequired > 1) {
      eval(tree, td.getValue(result), arg);

    } else if (argNumRequired == 1 && !hasArg) {
      eval(tree, arg);

    } else  {
      // Zero arguments required or one is required and one is already stored.
      // This normally happens when branch selected by conditional returns,
      // just store argument as final result
      result = td.setIsFinal(result, true);
      result = td.setValue(result, arg);
      tree.setResult(result);
    }
  }

  Void eval(Tree& tree) {
    eval(tree, 0x0, 0x0);
  }

  Void eval(Tree& tree, Byte arg1) {
    eval(tree, arg1, 0x0);
  }

  Void eval(Tree& tree, Byte arg1, Byte arg2) {
    TreeData td;
    Datum data = tree.getData();
    Type type = td.getType(data);

    if (type == TreeData.cTYPE_CONDITIONAL) {
      evalConditional(tree, arg1, arg2);

    } else if (type == TreeData.cTYPE_FUNCTION) {
      evalFunction(tree, arg1, arg2);

    } else {
      // not implemented
    }
  }

  Void evalConditional(Tree& tree, Byte arg1, Byte arg2) {
    TreeData td;
    Symbol symbol = td.getSymbol(tree.getData());

    DebugUtils du;

    Bool ok = true;
    Arity branch = 0u;
    if (symbol == cCONDITIONAL_IF_FOOD_AHEAD) {
      branch = isFoodAhead() ? 0u : 1u;
      if (branch == 0u) {
        du.print("is food ahead? yes");
      } else {
        du.print("is food ahead? no");
      }
    } else {
      ok = false; // unknown symbol, hang up
    }

    // Store selected branch as result
    if (ok) {
      Datum result = tree.getResult();
      result = td.setIsFinal(result, false);
      result = td.setValue(result, branch);
      tree.setResult(result);
    }
  }

  Void evalFunction(Tree& tree, Byte arg1, Byte arg2) {
    TreeData td;
    Symbol symbol = td.getSymbol(tree.getData());

    DebugUtils du;

    Bool ok = true;
    if (symbol == cFUNCTION_FORWARD) {
      du.print("forward");
      forward();
    } else if (symbol == cFUNCTION_LEFT) {
      du.print("left");
      left();
    } else if (symbol == cFUNCTION_RIGHT) {
      du.print("right");
      right();
    } else if (symbol == cFUNCTION_PROGN) {
      // do nothing
    } else {
      ok = false; // unknown symbol, hang up
    }

    // Store null as result
    if (ok) {
      Datum result = tree.getResult();
      result = td.setIsFinal(result, true);
      result = td.setValue(result, TreeData.cNIL);
      tree.setResult(result);
    }
  }

  Arity getArgNum(Tree& tree) {
    TreeData td;
    Datum data = tree.getData();
    return getArgNum(td.getType(data), td.getSymbol(data));
  }

  Arity getArgNum(Type type, Symbol symbol) {
    if (type == TreeData.cTYPE_FUNCTION) {
      if (symbol == cFUNCTION_PROGN)
        return 2u;
    }
    return 0u;
  }

  Bool isFoodAhead() {
    EventWindow ew;
    C2D coord = getForwardCoord();
    return (ew[coord] is AntFood);
  }

  Void forward() {
    mIsMoving = true; // retry
  }

  Void left() {
    mDir = (Dir) (((Int) mDir + 2) % 8);
  }

  Void right() {
    mDir = (Dir) (((Int) mDir + 6) % 8);
  }

  // NOTE: the ant is no longer at site 0 after swapping,
  // "self" reference won't work
  Void swapForward() {
    EventWindow ew;

    C2D coord = getForwardCoord();
    if (!ew.isAccessible(coord))
      return; // get stuck

    // What is ahead?
    Bool isNone = ew.isEmpty(coord);
    Bool isFood = (ew[coord] is AntFood);
    Bool isStart = (ew[coord] is AntTrailStart);
    Dir startDir = 0u;
    if (isStart) {
      AntTrailStart& start = (AntTrailStart&) ew[coord];
      startDir = start.mDir;
    }

    // Can we move there?
    if (!isNone && !(isFood && mIsOnTrail) && !(isStart && !mIsOnTrail))
      return; // stuck unless this thing moves

    // Save this to restore if needed
    Atom atom = ew[coord]; // copy
    Dir dir = mDir;

    // Consume
    if (isFood) {
      mEaten++;
    } else if (isStart) {
      mIsOnTrail = true;
      mDir = startDir;
    }
    Empty empty;
    ew[coord] = empty;

    // Move
    mIsMoving = false;
    SwapHelper sh;
    if (!sh.swap(0u, ew.getSiteNumberRaw(coord))) {
      // Probably can't move because of our bonds,
      // undo everything
      ew[coord] = atom;
      if (isFood) {
        mEaten--;
      } else if (isStart) {
        mIsOnTrail = false;
        mDir = dir;
      }
      mIsMoving = true; // retry later
    }
  }

  C2D getForwardCoord() {
    C2D origin;
    return origin.neighbor(mDir); // TODO: use ew.mapSym?
  }

  @Override Void renderGraphics() {
    self.QBondable2.renderGraphics();

    Drawable drawable;
    if (!drawable.canDraw())
      return;

    C2D start;
    C2D end = start.neighbor(mDir) * (Drawable.cUNITS_PER_SITE * 3 / 4);

    ColorUtils cu;
    ARGB oncol = cu.color(0x00cccccc);
    ARGB offcol = oncol;

    drawable.drawMaskedLine(start, end, oncol, offcol, 0xffffffff);
  }
}

