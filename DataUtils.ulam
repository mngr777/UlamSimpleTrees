quark DataUtils {
  typedef Bits(16) Datum;
  typedef Bits(8) Byte;
  typedef Int(8) Integer;

  Datum makeDatum(Byte hi, Byte lo) {
    return (Datum)((Datum) hi << 8 | lo);
  }


  Byte getHi(Datum datum) {
    return (Byte) (datum >> 8);
  }

  Datum setHi(Datum datum, Byte hi) {
    return (Datum) (datum & 0xff | (hi << 8));
  }

  Byte getLo(Datum datum) {
    return (Byte) datum;
  }

  Datum setLo(Datum datum, Byte lo) {
    return datum & 0xff00 | lo;
  }


  Byte getHi(Datum datum, Byte mask, Unsigned shift) {
    return getFromByte(getHi(datum), mask, shift);
  }

  Datum setHi(Datum datum, Byte value, Byte mask, Unsigned shift) {
    Byte hi = setToByte(getHi(datum), value, mask, shift);
    return setHi(datum, hi);
  }

  Byte getLo(Datum datum, Byte mask, Unsigned shift) {
    return getFromByte(getLo(datum), mask, shift);
  }

  Datum setLo(Datum datum, Byte value, Byte mask, Unsigned shift) {
    Byte lo = setToByte(getLo(datum), value, mask, shift);
    return setLo(datum, lo);
  }


  Integer toInteger(Byte value) {
    Byte mask = 0x1 << (Byte.sizeof - 1);
    return (Unsigned) (value & mask) > 0u
      ? (Integer) -(((Integer) ~value) + 1)
      : (Integer) value;
  }

  Byte fromInteger(Integer value) {
    return (Byte) value;
  }


  Byte getFromByte(Byte byte, Byte mask, Unsigned shift) {
    return (Byte) (byte & mask) >> shift;
  }

  Byte setToByte(Byte byte, Byte value, Byte mask, Unsigned shift) {
    return (Byte) ((byte & ~mask) | ((value << shift) & mask));
  }
}
