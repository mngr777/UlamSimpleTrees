use IBondable; // for ulam <=5.0.7

/**
   Dummy element matching file name to keep compiler happy

   \placeable no
 */
element ExecDemo {}

/**
   \symbol EP
   \color #00f
 */
element ExecDemoParameters {
  /**
     Reuse `TreeExec`'s program sequence as it's input
   */
  parameter Bool pREUSE_SEQUENCE = false;
}

/**
   \symbol E1
   \color #00f
 */
element ExecDemo1_RewindSequence : QExecDemo(1u) + QBondableT(1u) {
  @Override Void behave() {
    if (buildNext(self) && attachTreeBuilder(self))
      die();
  }
}

/**
   \symbol E2
   \color #00f
 */
element ExecDemo2_CopySequenceToMemory : QExecDemo(2u) + QBondableT(1u) {
  @Override Void behave() {
    if (buildNext(self) && attachTreeBuilder(self))
      die();
  }
}

/**
   \symbol E3
   \color #00f
 */
element ExecDemo3_TreeFromSequence : QExecDemo(3u) + QBondableT(1u) {
  @Override Void behave() {
    if (buildNext(self) && attachTreeBuilder(self))
      die();
  }
}

/**
   Shared demo code, stage 1:
   - build selected sequence;
   - attach `ExecDemoTreeBuilder` to set up stage 2
 */
quark QExecDemo(Unsigned cDEMO = 1u) + QMortal + Fail {
  typedef EventWindow.SiteNum SiteNum;

  typedef DataUtils.Byte Byte;
  typedef TreeData.Datum Datum;
  typedef TreeData.Symbol Symbol;
  typedef TreeData.Type Type;
  typedef TreeData.Arity Arity;

  typedef ExecDemoSequenceData.Size Size;
  typedef ExecDemoSequenceData.Item Item;

  constant QBond.Index cOUTPUT= 0u;

  Size mCount = 0u;

  Bool buildNext(Atom& demo) {
    if (mCount >= getDataSize())
      return true;

    SequenceBuilder builder;
    Datum data = getData(mCount);
    if (builder.buildNext(demo, data, cOUTPUT))
      mCount++;
    return false;
  }

  Bool attachTreeBuilder(Atom& demo) {
    BondUtils bu;
    EventWindow ew;
    EventWindowMisc ewm;

    SiteNum site = ewm.findEmptySite(1u, QBond.cMAX_DIST);
    if (site == SiteNum.maxof)
      return false;

    ExecDemoTreeBuilder builder;
    ew[site] = builder;

    IBondable& bondable = (IBondable&) demo;
    QBond& seqBond = bondable.getBond(cOUTPUT);
    SiteNum seqSite = seqBond.getSiteNumber();

    // Replace demo with the builder
    BondUtils.Status status = bu.replace(seqSite, seqBond.getIndex(), site, ExecDemoTreeBuilder.cSEQUENCE, Sequence.cCOMMON);
    if (bu.isError(status)) {
      Fail fl;
      fl.fail("Failed to replace with builder");
      return false;

    } else if (!bu.isOk(status)) {
      // cleanup
      Empty empty;
      ew[site] = empty;
      return false;
    }
    return true;
  }

  Size getDataSize() {
    if (cDEMO == 1u) {
      return ExecDemoRewindData.cSIZE;

    } else if (cDEMO == 2u) {
      return ExecDemoCopyData.cSIZE;

    } else if (cDEMO == 3u) {
      return ExecTreeBuildData.cSIZE;

    } else {
      Fail fl;
      fl.fail("Invalid demo number");
      return 0u;
    }
  }

  Datum getData(Size num) {
    if (cDEMO == 1u) {
      ExecDemoRewindData data;
      return data.prepare(data.data[num]);

    } else if (cDEMO == 2u) {
      ExecDemoCopyData data;
      return data.prepare(data.data[num]);

    } else if (cDEMO == 3u) {
      ExecTreeBuildData data;
      return data.prepare(data.data[num]);

    } else {
      Fail fl;
      fl.fail("Invalid demo number");
      return TreeData.cNODATA;
    }
  }
}


/**
   Setting up stage 2:
   - build a tree from the sequence;
   - attach the tree to a "general purpose" `TreeExec`;
   - attach an input sequence to the `TreeExec`;
   - if new input sequence is built, attach a mover to drag the original one aside

   \symbol EB
 */
element ExecDemoTreeBuilder : QTreeBuilder + QBondableT(3u) + QDiffusableT(1000u) + QMortal + Fail {
  constant QBond.Index cEXEC = 2u;

  constant State cSTATE_DETACHING_SEQUENCE = cSTATE_DONE_BUILDING; // alias
  constant State cSTATE_BUILDING_SEQUENCE = cSTATE_FIRST_UNUSED;
  constant State cSTATE_PLACING_EXEC = cSTATE_BUILDING_SEQUENCE + 1u;
  constant State cSTATE_ATTACHING_PROGRAM = cSTATE_PLACING_EXEC + 1u;
  constant State cSTATE_DONE = cSTATE_ATTACHING_PROGRAM + 1u;

  Unsigned mCount = 0u;

  @Override IBondable& getBondable() {
    return self;
  }

  @Override Void behave() {
    step();

    if (getState() == cSTATE_DONE || getState() == cSTATE_ERROR) {
      die();

    } else {
      diffuse();
    }
  }

  Void step() {
    self.QTreeBuilder.step();

    if (getState() == cSTATE_DETACHING_SEQUENCE) {
      detachSequence();

    } else if (getState() == cSTATE_BUILDING_SEQUENCE) {
      buildSequence();

    } else if (getState() == cSTATE_PLACING_EXEC) {
      placeExecAndAttachSequence();

    } else if (getState() == cSTATE_ATTACHING_PROGRAM) {
      attachProgram();
    }
  }

  /**
     Attach a mover to the input sequence to drag it away.
     Or do nothing and if reusing the sequence.
   */
  Void detachSequence() {
    DebugUtils du;

    ExecDemoParameters params;
    if (params.pREUSE_SEQUENCE) {
      du.print("Reusing program sequence as input");
      setState(cSTATE_PLACING_EXEC);
      return;
    };

    BondUtils bu;
    EventWindow ew;
    EventWindowMisc ewm;

    du.print("Detaching program sequence");

    QBond& seqBond = getBond(cSEQUENCE);
    SiteNum site = ewm.findEmptySiteAround(seqBond.getCoord(), 1u, QBond.cMAX_DIST);
    if (site == SiteNum.maxof)
      return;

    Mover mover;
    ew[site] = mover;

    // Replace ourselves with mover
    SiteNum seqSite = seqBond.getSiteNumber();
    BondUtils.Status status = bu.replace(seqSite, Sequence.cCOMMON, site, Mover.cCOMMON, Sequence.cCOMMON);
    if (!bu.isOk(status)) {
      // cleanup
      Empty empty;
      ew[site] = empty;
      return;
    }

    du.print("Building input sequence");
    setState(cSTATE_BUILDING_SEQUENCE);
  }

  /**
     Grow test sequence in place of detached input sequence.
   */
  Void buildSequence() {
    DebugUtils du;

    if (mCount >= ExecDemoShortData.cSIZE) {
      du.print("Input sequences ready");
      setState(cSTATE_PLACING_EXEC);
      return;
    }

    ExecDemoShortData data;
    SequenceBuilder builder;
    DataUtils.Datum datum = data.prepare(data.data[mCount]);
    if (builder.buildNext(self, datum, cSEQUENCE))
      mCount++;
  }

  Void placeExecAndAttachSequence() {
    BondUtils bu;
    DebugUtils du;
    EventWindow ew;
    EventWindowMisc ewm;

    QBond& seqBond = getBond(cSEQUENCE);
    SiteNum site = ewm.findEmptySiteAround(seqBond.getSiteNumber(), 1u, QBond.cMAX_DIST);
    if (site == SiteNum.maxof)
      return;

    TreeExec exec;
    ew[site] = exec;

    // Hold it in place by memory bond
    // (it could also be output: we need to attach the sequence to input, and
    // executor tries to run anything attached as program)
    QBond& execBond = getBond(cEXEC);
    if (!execBond.bond(0u, cEXEC, site, TreeExec.cMEMORY)) {
      // cleanup
      Empty empty;
      ew[site] = empty;
      return;
    }

    // transfer input sequence to exec.
    du.print("Transferring input sequence to executor");
    BondUtils.Status status = bu.transfer(0u, cSEQUENCE, site, TreeExec.cINPUT, Sequence.cCOMMON);
    if (bu.isError(status)) {
      fail("ExecDemoTreeBuilder.placeExecAndAttachSequence: failed to transfer input sequence to executor");
      return;

    } else if (!bu.isOk(status)) {
      du.print("  retrying input sequence transfer");
      // cleanup
      Empty empty;
      ew[site] = empty;
      return;
    }

    du.print("Attaching program to executor");
    setState(cSTATE_ATTACHING_PROGRAM);
  }

  Void attachProgram() {
    BondUtils bu;
    DebugUtils du;
    EventWindow ew;

    QBond& execBond = getBond(cEXEC);
    SiteNum execSite = execBond.getSiteNumber();

    // Transfer the tree to the executor
    BondUtils.Status status = bu.transfer(0u, cTREE, execSite, TreeExec.cPROGRAM, Tree.cCOMMON);
    if (bu.isError(status)) {
      fail("ExecDemoTreeBuilder.attachProgram: failed to transfer program tree to executor");
      return;

    } else if (bu.isOk(status)) {
      du.print("Program transferred");
      setState(cSTATE_DONE);

    } else {
      du.print("  retrying program transfer");
    }
  }
}


transient ExecDemoSequenceData {
  typedef DataUtils.Datum Datum;
  typedef DataUtils.Byte Byte;

  typedef TreeData.Type Type;
  typedef TreeData.Symbol Symbol;
  typedef TreeData.Arity Arity;

  // typedef Bits(Type.sizeof + Byte.sizeof) Item;
  typedef Bits(10) Item;

  typedef Unsigned(8) Size;

  constant Item cFUNC = TreeData.cTYPE_FUNCTION << Byte.sizeof;
  constant Item cCOND = TreeData.cTYPE_CONDITIONAL << Byte.sizeof;
  constant Item cCNST = TreeData.cTYPE_CONSTANT << Byte.sizeof;

  /*
    Item:

      type    value
      v       v
    | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
   */

  Type getType(Item item) {
    return (Type) (item >> Byte.sizeof);
  }

  Byte getValue(Item item) {
    return (Byte) item;
  }

  Datum prepare(Item item) {
    TreeData td;
    TreeExec exec;

    Type type = getType(item);
    Byte value = getValue(item);
    Arity arity = exec.getArity(type, (Symbol) value);

    Datum datum = TreeData.cNODATA;
    datum = td.setArity(datum, arity);
    datum = td.setType(datum, type);
    datum = td.setValue(datum, value);
    return datum;
  }
}


local typedef TreeExecFunctions EF;
local typedef TreeExecConditionals EC;

/**
   Very short test sequence

   (prog2
     (prog2
       (noop)
       (noop))
     (noop))
 */
transient ExecDemoShortData : ExecDemoSequenceData {
  constant Size cSIZE = 5u;

  Item data[cSIZE] = {
    /* */ cFUNC | EF.cPROG2,
    /*     */ cFUNC | EF.cPROG2,
    /*         */ cFUNC | EF.cNOOP,
    /*         */ cFUNC | EF.cNOOP,
    /*     */ cFUNC | EF.cNOOP
  };
}

/**
  Moving to the beginning of input sequence.

  (prog2
    (input) ; select input sequence
    (prog2
      (set-1
        (quote 1) ; prev. item bond index
      (if-has-attached
        (traverse) ; move to prev. item
        (noop)))))
*/
transient ExecDemoRewindData : ExecDemoSequenceData {
  constant Size cSIZE = 8u;

  Item data[cSIZE] = {
    /* */ cFUNC | EF.cPROG2,
    /*     */ cFUNC | EF.cINPUT,
    /*     */ cFUNC | EF.cPROG2,
    /*         */ cFUNC | EF.cSET_1,
    /*             */ cCNST | 1u,
    /*         */ cCOND | EC.cIF_HAS_ATTACHED,
    /*             */ cFUNC | EF.cTRAVERSE,
    /*             */ cFUNC | EF.cNOOP
  };
}

/**
   Storing a sequence into memory.
   The program assumes we're initially attached to the last item for simplicity.

   (prog2
     (input)
     (if-attached
       (prog2
         (prog2 ; store current item
           (memory-prev)
           (selected-to-memory))
         (prog2
           (set-1
             (quote 1)) ; prev. item bond index
           (if-has-attached
             (traverse) ; move to prev. item
             (detach)   ; no prev. item, detach from input sequence
           )))
       (noop) ; no input
     ))

 */
transient ExecDemoCopyData : ExecDemoSequenceData {
  constant Size cSIZE = 14u;

  Item data[cSIZE] = {
    /* */ cFUNC | EF.cPROG2,
    /*     */ cFUNC | EF.cINPUT,
    /*     */ cCOND | EC.cIF_ATTACHED,
    /*         */ cFUNC | EF.cPROG2,
    /*             */ cFUNC | EF.cPROG2,
    /*                 */ cFUNC | EF.cMEMORY_PREV,
    /*                 */ cFUNC | EF.cSELECTED_TO_MEMORY,
    /*             */ cFUNC | EF.cPROG2,
    /*                 */ cFUNC | EF.cSET_1,
    /*                     */ cCNST | 1u,
    /*                 */ cCOND | EC.cIF_HAS_ATTACHED,
    /*                     */ cFUNC | EF.cTRAVERSE,
    /*                     */ cFUNC | EF.cDETACH,
    /*         */ cFUNC | EF.cNOOP
  };
}

/**
   Building a tree from sequence.

     1  (if-input-attached
     2    (if-output-attached
     3      (prog2
     4        (prog2
     5          (prog2
     6            (output)
     7            (prog2
     8              (set-1 ; parent bond
     9                1)
    10              (set-2 ; # of children
    11                (-
    12                  (num-attached)   ; of attached atoms
    13                  (if-has-attached
    14                    2              ; minus ourselves and the parent
    15                    1))))          ; minus ourselves (root)
    16          (prog2
    17            (output)
    18            (set-1 ; arity - (# of children)
    19              (-
    20                (arity)
    21                (get-2)))))
    22        (if-zero
    23          (prog2     ;; Done, move to parent
    24            (set-1   ; parent bond
    25              1)
    26            (prog2   ; move to parent
    27              (output)
    28              (traverse)))
    29           (prog2 ;; Build next child and traverse to it
    30             (prog2
    31               (prog2 ; store input data for (build-next)
    32                 (input)
    33                 (selected-to-memory))
    34               (prog2
    35                 (prog2
    36                   (set-1    ; register 1 still has (arity - (# of children)), is it 2?
    37                     (-
    38                       (get-1)
    39                       2))
    40                   (if-zero
    41                     (set-1
    42                       2)    ; left child bond
    43                     (set-1
    44                       3)))  ; right child bond
    45                 (prog2
    46                   (prog2
    47                     (set-2 ; parent bond
    48                       1)
    49                     (build-next)) ; build child
    50                   (prog2          ; move to child
    51                     (output)
    52                     (traverse)))))
    53            (prog2         ;; Move to next item
    54              (prog2
    55                (input)
    56                (set-1
    57                  2))      ; next bond
    58              (if-has-attached
    59                (traverse) ; moving to next
    60                (detach)))))) ; done, detach input
    61      (prog2
    62        (set-1       ; prev. item bond, is it attached?
    63          1)
    64        (if-input-has-attached
    65          (traverse) ; move to prev. item
    66          (prog2
    67            (prog2
    68              (prog2    ; store input data for (build)
    69                (input)
    70                (selected-to-memory))
    71              (build))  ; build root
    72            (prog2      ; move to next item
    73              (set-1
    74                2)
    75              (if-has-attached
    76                (traverse)
    77                (detach))))))) ; done, detach input
    78    (noop)) ; no input
*/
transient ExecTreeBuildData : ExecDemoSequenceData {
  constant Size cSIZE = 78u;

  Item data[cSIZE] = {
    /*  1 */ cCOND | EC.cIF_INPUT_ATTACHED,
    /*  2     */ cCOND | EC.cIF_OUTPUT_ATTACHED,
    /*  3         */ cFUNC | EF.cPROG2,
    /*  4             */ cFUNC | EF.cPROG2,
    /*  5                 */ cFUNC | EF.cPROG2,
    /*  6                     */ cFUNC | EF.cOUTPUT,
    /*  7                     */ cFUNC | EF.cPROG2,
    /*  8                         */ cFUNC | EF.cSET_1,
    /*  9                             */ cCNST | (Byte) 1u,
    /* 10                         */ cFUNC | EF.cSET_2,
    /* 11                             */ cFUNC | EF.cSUB,
    /* 12                                 */ cFUNC | EF.cNUM_ATTACHED,
    /* 13                                 */ cCOND | EC.cIF_HAS_ATTACHED,
    /* 14                                     */ cCNST | (Byte) 2u,
    /* 15                                     */ cCNST | (Byte) 1u,
    /* 16                 */ cFUNC | EF.cPROG2,
    /* 17                     */ cFUNC | EF.cOUTPUT,
    /* 18                     */ cFUNC | EF.cSET_1,
    /* 19                         */ cFUNC | EF.cSUB,
    /* 20                             */ cFUNC | EF.cARITY,
    /* 21                             */ cFUNC | EF.cGET_2,
    /* 22             */ cCOND | EC.cIF_ZERO,
    /* 23                 */ cFUNC | EF.cPROG2,
    /* 24                     */ cFUNC | EF.cSET_1,
    /* 25                         */ cCNST | (Byte) 1u,
    /* 26                     */ cFUNC | EF.cPROG2,
    /* 27                         */ cFUNC | EF.cOUTPUT,
    /* 28                         */ cFUNC | EF.cTRAVERSE,
    /* 29                    */ cFUNC | EF.cPROG2,
    /* 30                        */ cFUNC | EF.cPROG2,
    /* 31                            */ cFUNC | EF.cPROG2,
    /* 32                                */ cFUNC | EF.cINPUT,
    /* 33                                */ cFUNC | EF.cSELECTED_TO_MEMORY,
    /* 34                            */ cFUNC | EF.cPROG2,
    /* 35                                */ cFUNC | EF.cPROG2,
    /* 36                                    */ cFUNC | EF.cSET_1,
    /* 37                                        */ cFUNC | EF.cSUB,
    /* 38                                            */ cFUNC | EF.cGET_1,
    /* 39                                            */ cCNST | (Byte) 2u,
    /* 40                                    */ cCOND | EC.cIF_ZERO,
    /* 41                                        */ cFUNC | EF.cSET_1,
    /* 42                                            */ cCNST | (Byte) 2u,
    /* 43                                        */ cFUNC | EF.cSET_1,
    /* 44                                            */ cCNST | (Byte) 3u,
    /* 45                                */ cFUNC | EF.cPROG2,
    /* 46                                    */ cFUNC | EF.cPROG2,
    /* 47                                        */ cFUNC | EF.cSET_2,
    /* 48                                            */ cCNST | (Byte) 1u,
    /* 49                                        */ cFUNC | EF.cBUILD_NEXT,
    /* 50                                    */ cFUNC | EF.cPROG2,
    /* 51                                        */ cFUNC | EF.cOUTPUT,
    /* 52                                        */ cFUNC | EF.cTRAVERSE,
    /* 53                     */ cFUNC | EF.cPROG2,
    /* 54                         */ cFUNC | EF.cPROG2,
    /* 55                             */ cFUNC | EF.cINPUT,
    /* 56                             */ cFUNC | EF.cSET_1,
    /* 57                                 */ cCNST | (Byte) 2u,
    /* 58                         */ cCOND | EC.cIF_HAS_ATTACHED,
    /* 59                             */ cFUNC | EF.cTRAVERSE,
    /* 60                             */ cFUNC | EF.cDETACH,
    /* 61         */ cFUNC | EF.cPROG2,
    /* 62             */ cFUNC | EF.cSET_1,
    /* 63                 */ cCNST | (Byte) 1u,
    /* 64             */ cCOND | EC.cIF_INPUT_HAS_ATTACHED,
    /* 65                 */ cFUNC | EF.cTRAVERSE,
    /* 66                 */ cFUNC | EF.cPROG2,
    /* 67                     */ cFUNC | EF.cPROG2,
    /* 68                         */ cFUNC | EF.cPROG2,
    /* 69                             */ cFUNC | EF.cINPUT,
    /* 70                             */ cFUNC | EF.cSELECTED_TO_MEMORY,
    /* 71                         */ cFUNC | EF.cBUILD,
    /* 72                     */ cFUNC | EF.cPROG2,
    /* 73                         */ cFUNC | EF.cSET_1,
    /* 74                             */ cCNST | (Byte) 2u,
    /* 75                         */ cCOND | EC.cIF_HAS_ATTACHED,
    /* 76                             */ cFUNC | EF.cTRAVERSE,
    /* 77                             */ cFUNC | EF.cDETACH,
    /* 78     */ cFUNC | EF.cNOOP
  };
}
