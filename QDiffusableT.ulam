local typedef EventWindow.SiteNum SiteNum;

quark QDiffusableT(IDiffusable.Diffusability cDIFFUSABILITY, WindowServices.Radius cDIFFUSION_RADIUS = 4u): IDiffusable {

  // constant Diffusability cCOMPLETE_DIFFUSABILITY = 10000u;
  // constant Diffusability cCOMPLETE_DIFFUSABILITY = 1000u;

  @Override Diffusability getDiffusability() {
    return cDIFFUSABILITY;
  }

  @Override WindowServices.Radius getDiffusionRadius() {
    return cDIFFUSION_RADIUS;
  }

  // NOTE: should only be called on an atom at the event window origin
  Void diffuse() {
    if (getDiffusability() == 0u || getDiffusionRadius() == 0u)
      return;

    EventWindow ew;
    Random random;

    // Get random site
    SiteNum site = (ew[0] is IBondable)
      ? getBondableDiffusionSite()
      : getDiffusionSite();
    if (site == SiteNum.maxof)
      return;

    // Swap with some probability
    Diffusability d = 0u;
    if (ew.isEmpty(site)) {
      d = getDiffusability();
    } else {
      Atom& other = ew[site];
      if (other as IDiffusable) {
        if (other.getDiffusability() > 0u
            && other.getDiffusionRadius() <= ew.getCoord(site).length())
        {
          Diffusability d1 = getDiffusability();
          Diffusability d2 = other.getDiffusability();
          d = (d1 < d2) ? d1 : d2;
        }
      }
    }
    if (d > 0u && random.oddsOf(d, getCompleteDiffusability())) {
      SwapHelper sh;
      sh.swap(0, site);
    }
  }

  Unsigned getCompleteDiffusability() {
    DemoParameters params;
    return params.pCOMPLETE_DIFFUSABILITY;
  }

  SiteNum getDiffusionSite() {
    WindowServices ws;
    ws.reset(1u, getDiffusionRadius());
    ws.scan(WindowServices.cALL_SITES_HIT);
    return ws.getPick();
  }

  /**
     The idea here is to make the bonds less likely to get fully
     stretched by diffusion, so an agent can stretch a bond when
     moving and make bonded atoms follow.
     This seems to work, more testing needed.
   */
  SiteNum getBondableDiffusionSite() {
    if (QBond.cMAX_DIST < 4u)
      return getDiffusionSite();

    EventWindow ew;
    IBondable& bondable = (IBondable&) ew[0];

    C2D coords[QBond.cMAX_NUM];
    QBond.Index coordNum = 0u;
    for (Unsigned i = 0u; i < bondable.getBondNum(); i++) {
      QBond& bond = bondable.getBond((QBond.Index) i);
      if (!bond.isBonded())
        continue;
       coords[coordNum++] = bond.getCoord();
    }

    WindowServices ws;
    ws.reset(1u, getDiffusionRadius());
    for (Int s = ws.next(); s >= 0; s = ws.next()) {
      SiteNum site = (SiteNum) s;
      C2D coord = ew.getCoordRaw(site);

      Unsigned weight = 5u;
      for (Unsigned i = 0u; i < coordNum; i++) {
        Unsigned dist = coord.manhattanDistance(coords[i]);
        if (dist > 3u) {
          weight = 1u;
          break;
        }
      }
      ws.hit(0u, weight);
    }
    return ws.getPick();
  }

  /**
    This is intended to draw atoms close to non-diffusable
    atom they're attached to. It's not clear that this helps.
  */
  SiteNum getBondableDiffusionSite_2() {
    if (QBond.cMAX_DIST < 3u)
      return getDiffusionSite();

    EventWindow ew;

    // Collect coordinates of attached non-diffusable atoms

    IBondable& bondable = (IBondable&) ew[0];

    C2D staticCoords[QBond.cMAX_NUM];
    Unsigned staticCoordNum = 0u;
    for (Unsigned i = 0u; i < bondable.getBondNum(); i++) {
      QBond& bond = bondable.getBond((QBond.Index) i);
      if (!bond.isBonded())
        continue;

      C2D coord = bond.getCoord();
      if (!(ew[coord] is IDiffusable))
        staticCoords[staticCoordNum++] = coord;
    }

    if (staticCoordNum == 0u)
      return getDiffusionSite();

    // Make sites near collected coordinates more attractive
    // TODO: try different parameters

    WindowServices ws;
    ws.reset(1u, getDiffusionRadius());
    for (Int s = ws.next(); s >= 0; s = ws.next()) {
      SiteNum site = (SiteNum) s;
      C2D coord = ew.getCoordRaw(site);

      Unsigned weight = 1u;
      for (Unsigned i = 0u; i < staticCoordNum; i++) {
        Unsigned dist = coord.manhattanDistance(staticCoords[i]);

        if (dist == 1u || dist == 2u) {
          weight = 20u;
          break;
        }
        if (dist == 3u) {
          weight = 10u;
          break;
        }
      }
      ws.hit(0u, weight);
    }
    return ws.getPick();
  }
}
