local typedef BondUtils BU;

quark QTreeBuilder {
  typedef EventWindow.SiteNum SiteNum;
  typedef Unsigned(4) State;

  constant QBond.Index cSEQUENCE = 0u;
  constant QBond.Index cTREE = 1u;

  constant State cSTATE_READY            = 0u;
  constant State cSTATE_ERROR            = 1u;
  constant State cSTATE_REWINDING        = 2u;
  constant State cSTATE_BUILDING         = 3u;
  constant State cSTATE_ADVANCING        = 4u;
  constant State cSTATE_MOVING_UP        = 5u;
  constant State cSTATE_MOVING_DOWN      = 6u;
  constant State cSTATE_DONE_BUILDING    = 7u;
  constant State cSTATE_FIRST_UNUSED = cSTATE_DONE_BUILDING + 1;

  State mState = cSTATE_READY;
  TreeData.Arity mDownChildIndex = TreeData.Arity.maxof; // TODO: use QBond.Index

  virtual IBondable& getBondable();

  State getState() {
      return mState;
  }

  Void setState(State state) {
    mState = state;
  }

  Void step() {
    if (mState == cSTATE_READY) {
      attach();
    } else if (mState == cSTATE_REWINDING) {
      rewind();
    } else if (mState == cSTATE_BUILDING) {
      build();
    } else if (mState == cSTATE_ADVANCING) {
      advance();
    } else if (mState == cSTATE_MOVING_UP) {
      up();
    } else if (mState == cSTATE_MOVING_DOWN) {
      down();
    }
  }

  Void attach() {
    IBondable& bondable = getBondable();

    // Check if already attached from somewhere else
    if (bondable.getBond(cSEQUENCE).isBonded()) {
      mState = cSTATE_REWINDING; // go to the beginning
      return;
    }

    // Search for sequence
    WindowServices ws;
    ws.reset(1u, QBond.cMAX_DIST);
    Sequence sequence;
    AtomUtils au;
    ws.scan(au.getType(sequence));
    if (ws.getHits() == 0u)
      return;

    // Bond to it
    QBond& bond = bondable.getBond(cSEQUENCE);
    if (bond.bond(cSEQUENCE, ws.getPick(), Sequence.cCOMMON))
      mState = cSTATE_REWINDING; // go to the beginning
  }

  Void build() {
    EventWindow ew;
    IBondable& bondable = getBondable();

    // Get sequence item
    SiteNum siteItem = bondable.getBond(cSEQUENCE).getSiteNumber();
    if (!ew.isAccessible(siteItem))
      return;
    Sequence& item = (Sequence&) ew[siteItem];

    // Build tree node
    if (!bondable.getBond(cTREE).isBonded()) {
      buildRoot(item);
    } else {
      buildChild(item);
    }
  }

  Void buildRoot(Sequence& item) {
    EventWindow ew;
    EventWindowMisc ewm;
    IBondable& bondable = getBondable();

    // Build tree
    SiteNum site = ewm.findEmptySite(QBond.cMAX_DIST);
    if (site == SiteNum.maxof)
      return;
    Tree tree;
    tree.setData(item.getData());
    ew[site] = tree;

    // Bond to it
    if (!bondable.getBond(cTREE).bond(cTREE, site, Tree.cCOMMON)) {
      // cleanup
      Empty empty;
      ew[site] = empty;
      return;
    }

    // Advance
    mState = cSTATE_ADVANCING;
  }

  Void buildChild(Sequence& item) {
    EventWindow ew;
    EventWindowMisc ewm;
    TreeData td;
    IBondable& bondable = getBondable();

    // Get current subtree
    SiteNum siteTree = bondable.getBond(cTREE).getSiteNumber();
    if (!ew.isAccessible(siteTree))
      return;
    Tree& tree = (Tree&) ew[siteTree];

    // Is this subtree complete?
    TreeData.Arity arityTree = td.getArity(tree.getData());
    if (tree.getChildNum() == arityTree) {
      mState = cSTATE_MOVING_UP; // done with this subtree
      return;
    }

    // Build child
    SiteNum site = ewm.findEmptySite(QBond.cMAX_DIST);
    if (site == SiteNum.maxof)
      return;
    Tree child;
    child.setData(item.getData());
    ew[site] = child;

    // Bond child to parent
    QBond.Index indexChild = (tree.getChildNum() == 0u)
      ? Tree.cLEFT
      : Tree.cRIGHT;
    QBond& bondChild = tree.getBond(indexChild);
    if (!bondChild.bond(siteTree, indexChild, site, Tree.cPARENT)) {
      // cleanup
      Empty empty;
      ew[site] = empty;
      return;
    }

    // Move to child
    mState = cSTATE_MOVING_DOWN;
    mDownChildIndex = (TreeData.Arity) indexChild;
  }

  Void rewind() {
    BU bu;
    BU.Status status = bu.traverse(cSEQUENCE, Sequence.cPREV, Sequence.cCOMMON);
    if (status == BU.cSTATUS_NO_NEXT) {
      mState = cSTATE_BUILDING;

    } else if (bu.isError(status)) {
      mState = cSTATE_ERROR;
    }
  }

  Void advance() {
    BU bu;
    BU.Status status = bu.traverse(cSEQUENCE, Sequence.cNEXT, Sequence.cCOMMON);
    if (status == BU.cSTATUS_NO_NEXT) {
      mState = cSTATE_DONE_BUILDING;

    } else if (bu.isOk(status)) {
      mState = cSTATE_BUILDING;

    } else if (bu.isError(status)) {
      mState = cSTATE_ERROR;
    }
  }

  Void up() {
    BU bu;
    BU.Status status =  bu.traverse(cTREE, Tree.cPARENT, Tree.cCOMMON);
    if (bu.isOk(status)) {
      mState = cSTATE_BUILDING;

    } else if (bu.isError(status)) {
      mState = cSTATE_ERROR;
    }
  }

  Void down() {
    BU bu;
    BU.Status status = bu.traverse(cTREE, mDownChildIndex, Tree.cCOMMON);
    if (bu.isOk(status)) {
      mState = cSTATE_ADVANCING;

    } else if (bu.isError(status)) {
      mState = cSTATE_ERROR;
    }

    if (mState != cSTATE_MOVING_DOWN)
      mDownChildIndex = TreeData.Arity.maxof;
  }
}
