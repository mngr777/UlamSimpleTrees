/**
    \symbol TB
    \symmetry all
 */
element TreeBuilder : QBondableT(2u) + QDiffusableT(1000u, 2u) + QMortal {
  constant QBond.Index cSEQUENCE = 0u;
  constant QBond.Index cTREE = 1u;

  Bool mFlagForward = false;

  Void behave() {
    QBond& bondSeq = getBond(cSEQUENCE);
    if (bondSeq.isBonded() || attach()) {
      EventWindow ew;
      Sequence& item = (Sequence&) ew[bondSeq.getSiteNumber()];
      if (process(item)) {
        getBond(cTREE).breakup();
        getBond(cSEQUENCE).breakup();
        die();
        return;
      }
    }

    diffuse();
  }

  Bool attach() {
    if (getBond(cSEQUENCE).isBonded())
      return true;

    WindowServices ws;
    ws.reset(1u, QBond.cMAX_DIST);

    Sequence sequence;
    AtomUtils au;
    ws.scan(au.getType(sequence));
    if (ws.getHits() == 0u)
      return false;

    return getBond(cSEQUENCE)
      .bond(cSEQUENCE, ws.getPick(), Sequence.cCOMMON);
  }

  Bool process(Sequence& item) {
    if (!getBond(cTREE).isBonded() && !item.isFirst()) {
      // Find first item to start building
      backward(item);

    } else if (mFlagForward) {
      // Move to next item
      forward(item);

    } else if (build(item)) {
      if (!item.isLast()) {
        // More work to do
        mFlagForward = true;
      } else {
        // Done
        return true;
      }
    }
    return false;
  }

  Void backward(Sequence& item) {
    traverse(item, Sequence.cPREV);
  }

  Void forward(Sequence& item) {
    if (traverse(item, Sequence.cNEXT))
      mFlagForward = false;
  }

  Bool traverse(Sequence& item, QBond.Index nextBondIndex) {
    QBond& bondSeq = getBond(cSEQUENCE);
    QBond& bondNext = item.getBond(nextBondIndex);

    if (!bondNext.isBonded())
      return false; // there's no next item

    EventWindow ew;

    C2D coordItem = bondSeq.getCoord();
    C2D coordNext = coordItem + bondNext.getCoord();
    if (!ew.isAccessible(coordNext))
      return false;

    Sequence& itemNext = (Sequence&) ew[coordNext];
    if (itemNext.getBond(Sequence.cCOMMON).isBonded())
      return false; // next item is already attached to something else

    if (!bondSeq.breakup())
      return false;

    if (!bondSeq.bond(cSEQUENCE, ew.getSiteNumberRaw(coordNext), Sequence.cCOMMON)) {
      // DebugUtils du;
      // du.print("TreeBuilder: failed to move to next item, aborting");
      // getBond(cTREE).breakup();
      Fail fl;
      fl.fail("TreeBuilder.traverse: failed to bond to next item");
    }
    return false;
  }

  Bool build(Sequence& item) {
    return true;
  }
}
