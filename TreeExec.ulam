/**
   "Universal" interpreter

   TODO: do not traverse to childred with arity 0, just peek at the data
   and eval while attached to parent, see `Ant`

   NOTE: `build` and `buildNext` always build trees. It's ok, `Tree` and `Sequence`
   are supposed to be a single type for data structures.

   \symbol TE
 */
element TreeExec : QBondableT(4u) + QDiffusableT(1000u) + QMortal {
  typedef Unsigned(5) State;

  typedef DataUtils.Datum Datum;
  typedef DataUtils.Byte Byte;

  typedef TreeData.Symbol Symbol;
  typedef TreeData.Arity Arity;
  typedef TreeData.Type Type;
  typedef TreeData.Byte Byte;

  constant QBond.Index cPROGRAM = 0u;
  constant QBond.Index cMEMORY  = 1u;
  constant QBond.Index cINPUT   = 2u;
  constant QBond.Index cOUTPUT  = 3u;

  constant State cSTATE_INIT               = 0u;
  constant State cSTATE_EXEC               = 1u;
  constant State cSTATE_MEMORY_PREV        = 2u;
  constant State cSTATE_MEMORY_NEXT        = 3u;
  constant State cSTATE_MEMORY_WRITE       = 4u;
  constant State cSTATE_SELECTED_TO_MEMORY = 5u;
  constant State cSTATE_BUILD              = 6u;
  constant State cSTATE_BUILD_NEXT         = 7u;
  constant State cSTATE_TRAVERSE           = 8u;
  constant State cSTATE_DONE               = 14u;
  constant State cSTATE_ERROR              = 15u;

  State mState;

  Datum mReg1;
  Datum mReg2;

  QBond.Index mSelectedBond = cINPUT;

  Void setState(State state) {
    mState = state;
  }

  Datum getReg1() {
    return mReg1;
  }

  Void setReg1(Datum datum) {
    mReg1 = datum;
  }

  Datum getReg2() {
    return mReg2;
  }

  Void setReg2(Datum datum) {
    mReg2 = datum;
  }

  QBond.Index selectBond(QBond.Index index) {
    QBond.Index old = mSelectedBond;
    mSelectedBond = index;
    return old;
  }

  QBond& getSelectedBond() {
    return getBond(mSelectedBond);
  }

  Void detachSelectedBond() {
    getSelectedBond().breakup();
  }

  @Override Void behave() {
    step();
  }

  Void step() {
    if (mState == cSTATE_INIT) {
      init();

    } else if (mState == cSTATE_EXEC) {
      exec();

    } else if (mState == cSTATE_MEMORY_PREV) {
      memoryPrev();

    } else if (mState == cSTATE_MEMORY_NEXT) {
      memoryNext();

    } else if (mState == cSTATE_MEMORY_WRITE) {
      memoryWrite();

    } else if (mState == cSTATE_SELECTED_TO_MEMORY) {
      selectedToMemory();

    } else if (mState == cSTATE_BUILD) {
      build();

    } else if (mState == cSTATE_BUILD_NEXT) {
      buildNext();

    } else if (mState == cSTATE_TRAVERSE) {
      traverse();
    }
  }

  Void init() {
    BondUtils bu;
    EventWindow ew;

    QBond& treeBond = getBond(cPROGRAM);
    if (!treeBond.isBonded())
      return;

    // Move to root
    Tree& tree = (Tree&) ew[treeBond.getSiteNumber()];
    if (!tree.isRoot()) {
      bu.traverse(cPROGRAM, Tree.cPARENT, Tree.cCOMMON);
      return;
    }

    mState = cSTATE_EXEC;
  }

  Void exec() {
    EventWindow ew;
    TreeData td;

    QBond& treeBond = getBond(cPROGRAM);
    if (!treeBond.isBonded())
      return; // no program

    if (!(ew[treeBond.getSiteNumber()] is Tree)) {
      DebugUtils du;
      du.print("TreeExec.exec: not a Tree");
      return;
    }

    Tree& tree = (Tree&) ew[treeBond.getSiteNumber()];
    Datum data = tree.getData();
    Datum result = tree.getResult();

    if (td.hasValue(result) && td.isFinal(result)) {
      complete(tree);
    } else if (td.hasValue(result) && td.getType(data) == TreeData.cTYPE_CONDITIONAL) {
      branch(tree);
    } else {
      evalOrMoveToChild(tree);
    }
  }

  Void memoryPrev() {
    memoryMove(Sequence.cPREV);
  }

  Void memoryNext() {
    memoryMove(Sequence.cNEXT);
  }

  Void memoryWrite() {
    if (!hasMemory() && !createMemory())
      return;

    Sequence& item = getMemory();
    item.setData(getReg1());

    setState(cSTATE_EXEC);
  }

  // NOTE: no state transition required
  Void memoryRead() {
    Datum datum = hasMemory()
      ? getMemory().getData()
      : TreeData.cNODATA;
    setReg1(datum);
  }

  Void selectedToMemory() {
    DebugUtils du;
    EventWindow ew;

    if (!hasMemory() && !createMemory())
      return;

    // Get data from selected item
    QBond& bond = getSelectedBond();
    if (!bond.isBonded()) {
      du.print("TreeExec.selectedToMemory: to selected item attached");
      setState(cSTATE_ERROR);
    }

    Sequence& selected = (Sequence&) ew[bond.getSiteNumber()];
    Datum datum = selected.getData();

    // Copy to memory
    getMemory().setData(datum);

    setState(cSTATE_EXEC);
  }

  Void build() {
    DebugUtils du;
    EventWindow ew;
    EventWindowMisc ewm;

    // Get data
    if (!hasMemory()) {
      du.print("TreeExec.build: memory is empty");
      setState(cSTATE_ERROR);
      return;
    }
    Datum datum = getMemory().getData();

    // Build
    SiteNum site = ewm.findEmptySite(1u, QBond.cMAX_DIST);
    if (site == SiteNum.maxof)
      return;
    Tree tree;
    tree.setData(datum);
    ew[site] = tree;

    QBond& output = getBond(cOUTPUT);

    // If we're already building something, let it go
    output.breakup();

    // Attach
    if (!output.bond(cOUTPUT, site, Tree.cCOMMON)) {
      // shouldn't happen, complain
      du.print("TreeExec.build: failed to attach to built root");

      // cleanup
      Empty empty;
      ew[site] = empty;
      return;
    }

    setState(cSTATE_EXEC);
  }

  Void buildNext() {
    DebugUtils du;
    EventWindow ew;
    EventWindowMisc ewm;
    TreeData td;

    // Get current bond index from register
    if (!td.hasValue(getReg1())) {
      du.print("TreeExec.buildNext: register 1 (current bond index) is empty");
      setState(cSTATE_ERROR);
      return;
    }
    QBond.Index currentIndex = (QBond.Index) td.getInteger(getReg1());

    if (!td.hasValue(getReg2())) {
      du.print("TreeExec.buildNext: register 2 (next bond index) is empty");
      setState(cSTATE_ERROR);
      return;
    }
    QBond.Index nextIndex = (QBond.Index) td.getInteger(getReg2());

    // Get data from memory
    if (!hasMemory()) {
      du.print("TreeExec.buildNext: memory is empty");
      setState(cSTATE_ERROR);
      return;
    }
    Datum data = getMemory().getData();

    // Get current site
    QBond& output = getBond(cOUTPUT);
    if (!output.isBonded()) {
      du.print("TreeExec.buildNext: output is empty");
      setState(cSTATE_ERROR);
    }
    SiteNum currentSite = output.getSiteNumber();
    Tree& current = (Tree&) ew[currentSite];

    // Build
    SiteNum nextSite = ewm.findEmptySiteAround(current, 1u, QBond.cMAX_DIST);
    if (nextSite == SiteNum.maxof)
      return;
    Tree next;
    next.setData(data);
    ew[nextSite] = next;

    Bool ok = true;

    // Detach from current
    ok = output.breakup();
    if (!ok)
      du.print("TreeExec.buildNext: failed to detach from current output");

    // Attach next to current
    if (ok) {
      QBond& currentBond = current.getBond(currentIndex);
      ok = currentBond.bond(currentSite, currentIndex, nextSite, nextIndex);
      if (!ok)
        du.print("TreeExec.buildNext: failed to attach next item to current");
    }

    if (!ok) {
      // cleanup
      Empty empty;
      ew[nextSite] = empty;
      return;
    }

    setState(cSTATE_EXEC);
  }

  Void traverse() {
    DebugUtils du;
    BondUtils bu;
    TreeData td;

    // Get index from register
    if (!td.hasValue(getReg1())) {
      du.print("TreeExec.traverse: register is empty");
      setState(cSTATE_ERROR);
      return;
    }
    QBond.Index index = (QBond.Index) td.getInteger(getReg1());

    // Get current item
    QBond& bond = getSelectedBond();
    if (!bond.isBonded()) {
      du.print("TreeExec.traverse: selected bond is not attached");
      setState(cSTATE_ERROR);
      return;
    }

    QBond.Index indexBond = bond.getIndex(); // TODO: use second register?
    // BondUtils.Status status = bu.traverse(bond.getIndex(), index, indexBond);
    BondUtils.Status status = bu.traverse(mSelectedBond, index, indexBond);
    if (bu.isOk(status)) {
      setState(cSTATE_EXEC);

    } else if (bu.isError(status)) {
      du.print("TreeExec.traverse: failed to traverse, status:");
      du.print(status);

      setState(cSTATE_ERROR);
    }
    // otherwise retry

  }

  Void complete(Tree& tree) {
    BondUtils bu;
    EventWindow ew;
    TreeData td;

    if (tree.isRoot()) {
      // mState = cSTATE_DONE;

      DebugUtils du;
      du.print("restarting program");

      // Start over
      tree.setResult(TreeData.cNODATA);
      mState = cSTATE_EXEC;
      return;
    }

    // Move to parent
    if (!bu.isOk(bu.traverse(cPROGRAM, Tree.cPARENT, Tree.cCOMMON)))
      return;

    Datum result = tree.getResult();

    // Pass the result to parent
    Tree& parent = (Tree&) ew[getBond(cPROGRAM).getSiteNumber()];
    evalOrStoreArgument(parent, td.getValue(result));

    // Unset child's value
    // result = td.setIsFinal(result, false);
    // result = td.unsValue(result);
    // tree.setResult(result);
    tree.setResult(TreeData.cNODATA);
  }

  Void branch(Tree& tree) {
    BondUtils bu;
    TreeData td;

    Datum result = tree.getResult();
    Arity branch = (Arity) td.getValue(result);
    if (branch == Arity.maxof) {
      // done
      result = td.setIsFinal(result, true);
      result = td.setValue(result, TreeData.cNIL);
      tree.setData(result);
    } else {
      // Move to selected branch
      QBond.Index index = (branch == 0u) ? Tree.cLEFT : Tree.cRIGHT;
      bu.traverse(cPROGRAM, index, Tree.cCOMMON);
    }
  }

  // NOTE:
  // * assuming eval always succeeds, so there's no need to store the 2nd argument to retry
  // * also assume that arguments are always passed in correct order
  Void evalOrStoreArgument(Tree& tree, Byte arg) {
    TreeData td;

    Datum result = tree.getResult();
    Arity argNumRequired = getArgNum(tree);
    Bool hasArg = td.hasValue(result);

    if (argNumRequired > 1 && !hasArg) {
      // Store as 1st argument
      result = td.setIsFinal(result, false);
      result = td.setValue(result, arg);
      tree.setResult(result);

    } else if (argNumRequired > 1) {
      eval(tree, td.getValue(result), arg);

    } else if (argNumRequired == 1 && !hasArg) {
      eval(tree, arg, TreeData.cNIL);

    } else {
      // Zero arguments required or one is required and one is already stored.
      // This normally happens when branch selected by a conditional returns,
      // just store argument as final result
      result = td.setIsFinal(result, true);
      result = td.setValue(result, arg);
      tree.setResult(result);
    }
  }

  Void evalOrMoveToChild(Tree& tree) {
    BondUtils bu;
    TreeData td;

    Datum result = tree.getResult();
    Arity argNumRequired = getArgNum(tree);

    if (argNumRequired == 1u && td.hasValue(result)) {
      eval(tree, td.getValue(result), TreeData.cNIL);

    } else if (argNumRequired == 0u) {
      eval(tree, TreeData.cNIL, TreeData.cNIL);

    } else {
      QBond.Index index = td.hasValue(result) ? Tree.cRIGHT : Tree.cLEFT;
      bu.traverse(cPROGRAM, index, Tree.cCOMMON);
    }
  }

  Void eval(Tree& tree, Byte arg1, Byte arg2) {
    TreeData td;

    Datum data = tree.getData();
    Type type = td.getType(data);

    if (type == TreeData.cTYPE_CONDITIONAL) {
      evalConditional(tree, arg1);

    } else if (type == TreeData.cTYPE_FUNCTION) {
      evalFunction(tree, arg1, arg2);

    } else if (type == TreeData.cTYPE_CONSTANT) {
      Datum result = TreeData.cNODATA;
      result = td.setIsFinal(result, true);
      result = td.setValue(result, td.getValue(data));
      tree.setResult(result);

    } else {
      DebugUtils du;
      du.print("TreeExec.eval: unexpected type");
      setState(cSTATE_ERROR);
    }
  }

  Void evalConditional(Tree& tree, Byte arg) {
    TreeData td;
    Symbol symbol = td.getSymbol(tree.getData());

    TreeExecConditionals ec;
    Arity branch = ec.eval(self, symbol, arg);

    // Store selected branch as argument/non-final value
    Datum result = tree.getResult();
    result = td.setIsFinal(result, false);
    result = td.setValue(result, branch);
    tree.setResult(result);
  }

  Void evalFunction(Tree& tree, Byte arg1, Byte arg2) {
    TreeData td;
    Symbol symbol = td.getSymbol(tree.getData());

    TreeExecFunctions ef;
    Byte value = ef.eval(self, symbol, arg1, arg2);

    // Store result value as final
    Datum result = tree.getResult();
    result = td.setIsFinal(result, true);
    result = td.setValue(result, value);
    tree.setResult(result);
  }

  Arity getArgNum(Tree& tree) {
    TreeData td;
    Datum data = tree.getData();
    return getArgNum(td.getType(data), td.getSymbol(data));
  }

  Arity getArgNum(Type type, Symbol symbol) {
    if (type == TreeData.cTYPE_CONDITIONAL) {
      TreeExecConditionals ec;
      return ec.getArgNum(symbol);

    } else if (type == TreeData.cTYPE_FUNCTION) {
      TreeExecFunctions ef;
      return ef.getArgNum(symbol);

    } else if (type == TreeData.cTYPE_CONSTANT) {
      return 0u;
    }

    // TODO: fail
    DebugUtils du;
    du.print("TreeExec.getArgNum: unexpected type:");
    du.print(type);
    return 0u;
  }

  Arity getArity(Type type, Symbol symbol) {
    if (type == TreeData.cTYPE_CONDITIONAL) {
      TreeExecConditionals ec;
      return ec.getArity(symbol);

    } else if (type == TreeData.cTYPE_FUNCTION) {
      TreeExecFunctions ef;
      return ef.getArity(symbol);

    } else if (type == TreeData.cTYPE_CONSTANT) {
      return 0u;
    }

    // TODO: fail
    DebugUtils du;
    du.print("TreeExec.getArgNum: unexpected type:");
    du.print(type);
    return 0u;
  }

  Void memoryMove(QBond.Index next) {
    if (!hasMemory()) {
      if (createMemory())
        setState(cSTATE_EXEC);
      return;
    }

    // Create next item if it doesn't exist
    Sequence& item = getMemory();
    if (!item.getBond(next).isBonded() && !createMemoryNext(next))
      return;

    // Move to next item
    BondUtils bu;
    if (bu.isOk(bu.traverse(cMEMORY, next, Sequence.cCOMMON)))
      setState(cSTATE_EXEC);
  }

  Bool hasMemory() {
    return getBond(cMEMORY).isBonded();
  }

  Sequence& getMemory() {
    EventWindow ew;
    SiteNum site = getBond(cMEMORY).getSiteNumber();
    return (Sequence&) ew[site];
  }

  Bool createMemoryNext(QBond.Index index) {
    EventWindow ew;
    EventWindowMisc ewm;

    // Get previous item
    Sequence& prev = getMemory();
    SiteNum prevSite = ew.getSiteNumber(prev);

    SiteNum site = ewm.findEmptySiteAround(prev, 1u, QBond.cMAX_DIST);
    if (site == SiteNum.maxof)
      return false;

    Sequence seq;
    ew[site] = seq;

    // Attach to previous item
    QBond.Index nextIndex = (index == Sequence.cNEXT)
      ? Sequence.cPREV
      : Sequence.cNEXT;
    if (!prev.getBond(index).bond(prevSite, index, site, nextIndex)) {
      // should't happen, complain
      DebugUtils du;
      du.print("TreeExec.createMemory: failed to attach memory item to sequence");
      Empty empty;
      ew[site] = empty;
      return false;
    }
    return true;
  }

  Bool createMemory() {
    EventWindow ew;
    EventWindowMisc ewm;

    SiteNum site = ewm.findEmptySite(1u, QBond.cMAX_DIST);
    if (site == SiteNum.maxof)
      return false;

    Sequence seq;
    ew[site] = seq;

    // Attach
    if (!getBond(cMEMORY).bond(cMEMORY, site, Sequence.cCOMMON)) {
      // should't happen, complain
      DebugUtils du;
      du.print("TreeExec.createMemory: failed to attach to memory item");
      // cleanup
      Empty empty;
      ew[site] = empty;
      return false;
    }
    return true;
  }
}


local typedef TreeExec TE;

transient TreeExecImpl + Fail {
  typedef TreeData.Symbol Symbol;
  typedef TreeData.Arity Arity;
  typedef TreeData.Type Type;
  typedef TreeData.Byte Byte;

  typedef DataUtils.Datum Datum;
  typedef DataUtils.Byte Byte;

  TreeData td;

  IBondable& getSelectedBondable(TreeExec& exec) {
    return (IBondable&) getSelectedAtom(exec);
  }

  Bool hasSelected(TreeExec& exec) {
    QBond& bond = exec.getSelectedBond();
    return bond.isBonded();
  }

  Datum getSelectedData(TreeExec& exec) {
    QBond& bond = exec.getSelectedBond();
    if (!bond.isBonded())
      return TreeData.cNODATA;

    EventWindow ew;
    Atom& atom = ew[bond.getSiteNumber()];

    if (atom as Sequence)
      return atom.getData();

    if (atom as Tree)
      return atom.getData();

    fail("TreeExec: failed to get attached data");
    return TreeData.cNODATA;
  }

  Atom& getSelectedAtom(TreeExec& exec) {
    QBond& bond = exec.getSelectedBond();
    if (!bond.isBonded())
      fail("TreeExec: selected bond is not attached");

    EventWindow ew;
    return ew[bond.getSiteNumber()];
  }
}

transient TreeExecConditionals : TreeExecImpl {
  constant Symbol cSYMBOL_IF_SET       = 0x1; // alias
  constant Symbol cSYMBOL_IF_SET_1     = 0x1;
  constant Symbol cSYMBOL_IF_SET_2     = 0x2;
  constant Symbol cSYMBOL_IF_ZERO      = 0x3;
  constant Symbol cSYMBOL_IF_ATTACHED  = 0x4;
  constant Symbol cSYMBOL_IF_HAS_ATTACHED = 0x5;
  constant Symbol cSYMBOL_IF_INPUT_HAS_ATTACHED = 0x6; // redundant?

  Arity getArgNum(Symbol symbol) {
    return 0u;
  }

  Arity getArity(Symbol symbol) {
    return 2u; // TODO: maybe allow having a single branch (or just add a no-op for unused one)
  }

  Arity eval(TE& exec, Symbol symbol, Byte arg1) {
    DebugUtils du;
    Bool verbose = true;

    Bool cond = false;

    if (symbol == cSYMBOL_IF_SET || symbol == cSYMBOL_IF_SET_1) {
      if (verbose) du.print("if-set-1");
      cond = td.hasValue(exec.getReg1());

    } else if (symbol == cSYMBOL_IF_SET_2) {
      if (verbose) du.print("if-set-2");
      cond = td.hasValue(exec.getReg2());

    } else if (symbol == cSYMBOL_IF_ATTACHED) {
      if (verbose) du.print("if-attached");
      cond = exec.getBond(exec.mSelectedBond).isBonded();

    } else if (symbol == cSYMBOL_IF_ZERO) {
      if (verbose) du.print("if-zero");
      cond = td.hasValue(exec.getReg1())
        && (Int(8)) td.getValue(exec.getReg1()) == 0;

    } else if (symbol == cSYMBOL_IF_HAS_ATTACHED) {
      if (verbose) du.print("if-has-attached");
      cond = hasAttached(exec);

    } else if (symbol == cSYMBOL_IF_INPUT_HAS_ATTACHED) {
      if (verbose) du.print("if-input-has-attached");
      QBond.Index selected = exec.selectBond(TreeExec.cINPUT);
      hasAttached(exec);
      exec.selectBond(selected);

    } else {
      fail("Unknown conditional symbol");
    }

    Arity argNum = getArgNum(symbol);
    if (argNum == 1)
      return cond ? 1u : Arity.maxof;
    // assert(argNum == 0);
    return cond ? 0u : 1u;
  }

  Bool hasAttached(TE& exec) {
    TreeData td;

    if (!hasSelected(exec))
      return false;

    if (!td.hasValue(exec.getReg1()))
      return false;

    IBondable& bondable = getSelectedBondable(exec);
    QBond.Index index = (QBond.Index) td.getInteger(exec.getReg1());
    if (index > bondable.getBondNum())
      return false;

    return bondable.getBond(index).isBonded();
  }
}


transient TreeExecFunctions : TreeExecImpl {
  typedef TreeData.Integer Integer;

  constant Symbol cSYMBOL_INPUT              = 0x1;
  constant Symbol cSYMBOL_OUTPUT             = 0x2;
  constant Symbol cSYMBOL_SET_1              = 0x3;
  constant Symbol cSYMBOL_UNSET_1            = 0x4;
  constant Symbol cSYMBOL_SET_2              = 0x5;
  constant Symbol cSYMBOL_UNSET_2            = 0x6;
  constant Symbol cSYMBOL_MEMORY_PREV        = 0x7;
  constant Symbol cSYMBOL_MEMORY_NEXT        = 0x8;
  constant Symbol cSYMBOL_MEMORY_READ        = 0x9;
  constant Symbol cSYMBOL_MEMORY_WRITE       = 0xa;
  constant Symbol cSYMBOL_SELECTED_TO_MEMORY = 0xb;
  constant Symbol cSYMBOL_ARITY              = 0xd;
  constant Symbol cSYMBOL_NUM_ATTACHED       = 0xe;
  constant Symbol cSYMBOL_TRAVERSE           = 0xf;
  constant Symbol cSYMBOL_TRAVERSE_1         = 0x10;
  constant Symbol cSYMBOL_TRAVERSE_2         = 0x11;
  constant Symbol cSYMBOL_TRAVERSE_3         = 0x12;
  constant Symbol cSYMBOL_PROG1              = 0x13;
  constant Symbol cSYMBOL_PROG2              = 0x14;
  constant Symbol cSYMBOL_ADD                = 0x15;
  constant Symbol cSYMBOL_SUB                = 0x16;
  constant Symbol cSYMBOL_INC                = 0x17;
  constant Symbol cSYMBOL_DEC                = 0x18;
  constant Symbol cSYMBOL_BUILD              = 0x19;
  constant Symbol cSYMBOL_BUILD_NEXT         = 0x1a;
  constant Symbol cSYMBOL_BUILD_NEXT_1       = 0x1b;
  constant Symbol cSYMBOL_BUILD_NEXT_2       = 0x1c;
  constant Symbol cSYMBOL_BUILD_NEXT_3       = 0x1d;
  constant Symbol cSYMBOL_NOOP               = 0x1e;
  constant Symbol cSYMBOL_DETACH             = 0x1f;
  constant Symbol cSYMBOL_DETACH_INPUT       = 0x20;
  constant Symbol cSYMBOL_DETACH_OUTPUT      = 0x21;

  Arity getArgNum(Symbol symbol) {
    if (symbol == cSYMBOL_PROG1 ||
        symbol == cSYMBOL_PROG2)
    {
      return 2u;
    }

    if (symbol == cSYMBOL_SET_1 ||
        symbol == cSYMBOL_SET_2 ||
        symbol == cSYMBOL_ADD ||
        symbol == cSYMBOL_SUB)
    {
      return 1u;
    }

    return 0u;
  }

  Arity getArity(Symbol symbol) {
    return getArgNum(symbol); // same thing for functions
  }

  Byte eval(TreeExec& exec, Symbol symbol, Byte arg1, Byte arg2) {
    DebugUtils du;
    Bool verbose = true;

    Byte ret = 0x0;

    if (symbol == cSYMBOL_INPUT) {
      if (verbose) du.print("input");
      exec.selectBond(TE.cINPUT);

    } else if (symbol == cSYMBOL_OUTPUT) {
      if (verbose) du.print("output");
      exec.selectBond(TE.cOUTPUT);

    } else if (symbol == cSYMBOL_SET_1) {
      if (verbose) du.print("set-1");
      Datum datum = td.setValue(exec.getReg1(), arg1);
      exec.setReg1(datum);

    } else if (symbol == cSYMBOL_UNSET_1) {
      if (verbose) du.print("unset-1");
      Datum datum = td.unsValue(exec.getReg1());
      exec.setReg1(datum);

    } else if (symbol == cSYMBOL_SET_2) {
      if (verbose) du.print("set-2");
      Datum datum = td.setValue(exec.getReg2(), arg2);
      exec.setReg2(datum);

    } else if (symbol == cSYMBOL_UNSET_2) {
      if (verbose) du.print("unset-2");
      Datum datum = td.unsValue(exec.getReg2());
      exec.setReg2(datum);

    } else if (symbol == cSYMBOL_MEMORY_PREV) {
      if (verbose) du.print("memory-prev");
      exec.setState(TE.cSTATE_MEMORY_PREV);

    } else if (symbol == cSYMBOL_MEMORY_NEXT) {
      if (verbose) du.print("memory-next");
      exec.setState(TE.cSTATE_MEMORY_NEXT);

    } else if (symbol == cSYMBOL_MEMORY_READ) {
      if (verbose) du.print("memory-read");
      exec.memoryRead();

    } else if (symbol == cSYMBOL_MEMORY_WRITE) {
      if (verbose) du.print("memory-write");
      exec.setState(TE.cSTATE_MEMORY_WRITE);

    } else if (symbol == cSYMBOL_SELECTED_TO_MEMORY) {
      if (verbose) du.print("selected-to-memory");
      exec.setState(TE.cSTATE_SELECTED_TO_MEMORY);

    } else if (symbol == cSYMBOL_ARITY) {
      if (verbose) du.print("arity");
      return td.getArity(getSelectedData(exec));

    } else if (symbol == cSYMBOL_NUM_ATTACHED) {
      if (verbose) du.print("attached");
      return getSelectedBondable(exec).getAttachedBondNum();

    } else if (symbol == cSYMBOL_TRAVERSE) {
      if (verbose) du.print("traverse");
      traverse(exec);

    } else if (symbol == cSYMBOL_TRAVERSE_1) {
      if (verbose) du.print("traverse-1");
      traverse(exec, 1u);

    } else if (symbol == cSYMBOL_TRAVERSE_2) {
      if (verbose) du.print("traverse-2");
      traverse(exec, 2u);

    } else if (symbol == cSYMBOL_TRAVERSE_3) {
      if (verbose) du.print("traverse-3");
      traverse(exec, 3u);

    } else if (symbol == cSYMBOL_PROG1) {
      // if (verbose) du.print("prog1");
      ret = arg1;

    } else if (symbol == cSYMBOL_PROG2) {
      // if (verbose) du.print("prog2");
      ret = arg2;

    } else if (symbol == cSYMBOL_ADD) {
      if (verbose) du.print("+");
      ret = add(exec, (Integer) arg1, false);

    } else if (symbol == cSYMBOL_SUB) {
      if (verbose) du.print("-");
      ret = add(exec, -((Integer) arg1), false);

    } else if (symbol == cSYMBOL_INC) {
      if (verbose) du.print("inc");
      ret = add(exec, 1, true);

    } else if (symbol == cSYMBOL_DEC) {
      if (verbose) du.print("dec");
      ret = add(exec, -1, true);

    } else if (symbol == cSYMBOL_BUILD) {
      if (verbose) du.print("build");
      exec.setState(TE.cSTATE_BUILD);

    } else if (symbol == cSYMBOL_BUILD_NEXT) {
      if (verbose) du.print("build-next");
      buildNext(exec);

    } else if (symbol == cSYMBOL_BUILD_NEXT_1) {
      if (verbose) du.print("build-next-1");
      buildNext(exec, 1);

    } else if (symbol == cSYMBOL_BUILD_NEXT_2) {
      if (verbose) du.print("build-next-2");
      buildNext(exec, 2);

    } else if (symbol == cSYMBOL_BUILD_NEXT_3) {
      if (verbose) du.print("build-next-3");
      buildNext(exec, 3);

    } else if (symbol == cSYMBOL_NOOP) {
      if (verbose) du.print("noop");
      // do nothing

    } else if (symbol == cSYMBOL_DETACH) {
      if (verbose) du.print("detach");
      exec.detachSelectedBond();

    } else if (symbol == cSYMBOL_DETACH_INPUT) {
      if (verbose) du.print("detach-input");
      QBond.Index selected = exec.selectBond(TreeExec.cINPUT);
      exec.detachSelectedBond();
      exec.selectBond(selected);

    } else if (symbol == cSYMBOL_DETACH_OUTPUT) {
      if (verbose) du.print("detach-output");
      QBond.Index selected = exec.selectBond(TreeExec.cOUTPUT);
      exec.detachSelectedBond();
      exec.selectBond(selected);

    } else {
      // DebugUtils du;
      // du.print("Unknown function symbol:");
      // du.print((Unsigned) symbol);
      fail("Unknown function symbol");
    }

    return ret;
  }

  Void traverse(TreeExec& exec) {
    exec.setState(TE.cSTATE_TRAVERSE);
  }

  Void traverse(TreeExec& exec, QBond.Index index) {
    Datum datum = exec.getReg1();
    datum = td.setInteger(datum, index);
    exec.setReg1(datum);

    traverse(exec);
  }

  Void buildNext(TreeExec& exec) {
    exec.setState(TE.cSTATE_BUILD_NEXT);
  }

  Void buildNext(TreeExec& exec, QBond.Index index) {
    Datum datum = exec.getReg1();
    datum = td.setInteger(datum, index);
    exec.setReg1(datum);

    buildNext(exec);
  }

  Integer add(TreeExec& exec, Integer addend, Bool retCurrent) {
    Datum datum = exec.getReg1();

    Integer current = td.hasValue(datum) ? td.getInteger(datum) : 0;
    Integer sum = (Integer) (current + addend);
    datum = td.setInteger(datum, sum);
    exec.setReg1(datum);

    return retCurrent ? current : sum;
  }
}
